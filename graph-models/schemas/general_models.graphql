enum FetchType {
    POSITIVE
    NEUTRAL
    NEGATIVE
}
enum ActionType {
    READ
    WRITE
}
enum EventSubjectAction {
    ADD
    DELETE
}
enum RoomType {
    TALK
    BLOG
}

input Params {
    limit: Int
    offset: Int
}

type TokenPair {
    accessToken: String!
    refreshToken: String!
}

type Employee {
    empID: ID!
    firstName: String!
    lastName: String!
    joinedAt: Int64!
    # for the client
    tags: Tags!
}
type Employees {
    employees: [Employee!]
}

type PersonalData {
    email: String!
    phoneNumber: String!
    token: String!
}

type Room {
    roomID: ID!
    name: String!
    view: RoomType!
    # for the client
    lastMessageRead: ID!
    lastMessageID: ID!
    members: Members! @goField(forceResolver: true)
}
type Rooms {
    rooms: [Room!]
}

type Member {
    employee: Employee! @goField(forceResolver: true)
    room: Room! @goField(forceResolver: true)
}
type Members {
    members: [Member!]
}

type Tag {
    tagID: ID!
    name: String!
}
type Tags {
    tags: [Tag!]
}

type Message {
    room: Room! @goField(forceResolver: true)
    msgID: ID!
    employee: Employee! @goField(forceResolver: true)
    targetMsgID: Message @goField(forceResolver: true)
    body: String!
    createdAt: Int64!
}
type Messages {
    messages: [Message!]
}

type Me {
    employee: Employee!
    personal: PersonalData!
    rooms: Rooms! @goField(forceResolver: true)
}

type ListenCollection {
    sessionKey: String!
    success: String!
    collection: [ListenedChat!]! @goField(forceResolver: true)
}

type ListenedChat {
    id: ID!
    events: [EventType!]!
}