// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type EditListenEventCollectionResult interface {
	IsEditListenEventCollectionResult()
}

type EmployeesResult interface {
	IsEmployeesResult()
}

type EventResult interface {
	IsEventResult()
}

type LoginResult interface {
	IsLoginResult()
}

type MeResult interface {
	IsMeResult()
}

type MessagesResult interface {
	IsMessagesResult()
}

type MutationResult interface {
	IsMutationResult()
}

type RefreshTokensResult interface {
	IsRefreshTokensResult()
}

type RegisterResult interface {
	IsRegisterResult()
}

type RoomsResult interface {
	IsRoomsResult()
}

type SendMsgResult interface {
	IsSendMsgResult()
}

type TagsResult interface {
	IsTagsResult()
}

type AdvancedError struct {
	Code  string `json:"code"`
	Error string `json:"error"`
}

func (AdvancedError) IsMutationResult()                  {}
func (AdvancedError) IsMeResult()                        {}
func (AdvancedError) IsRoomsResult()                     {}
func (AdvancedError) IsTagsResult()                      {}
func (AdvancedError) IsEmployeesResult()                 {}
func (AdvancedError) IsLoginResult()                     {}
func (AdvancedError) IsRefreshTokensResult()             {}
func (AdvancedError) IsRegisterResult()                  {}
func (AdvancedError) IsSendMsgResult()                   {}
func (AdvancedError) IsMessagesResult()                  {}
func (AdvancedError) IsEditListenEventCollectionResult() {}

type CreateMessageInput struct {
	RoomID      int    `json:"roomID"`
	TargetMsgID *int   `json:"targetMsgID"`
	Body        string `json:"body"`
}

type CreateTag struct {
	TagID int    `json:"tagID"`
	Name  string `json:"name"`
}

func (CreateTag) IsEventResult() {}

type DeleteRoom struct {
	RoomsID []int `json:"roomsID"`
}

func (DeleteRoom) IsEventResult() {}

type DeleteTag struct {
	TagID []int `json:"tagID"`
}

func (DeleteTag) IsEventResult() {}

type Employee struct {
	EmpID     int    `json:"empID"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	JoinedAt  int64  `json:"joinedAt"`
	Tags      *Tags  `json:"tags"`
}

type Employees struct {
	Employees []*Employee `json:"employees"`
}

func (Employees) IsEmployeesResult() {}

type FindEmployees struct {
	EmpID  *int    `json:"empID"`
	RoomID *int    `json:"roomID"`
	TagID  *int    `json:"tagID"`
	Name   *string `json:"name"`
}

type FindMessages struct {
	MsgID        *int    `json:"msgID"`
	EmpID        *int    `json:"empID"`
	RoomID       *int    `json:"roomID"`
	TargetID     *int    `json:"targetID"`
	TextFragment *string `json:"textFragment"`
}

type FindRooms struct {
	RoomID *int    `json:"roomID"`
	Name   *string `json:"name"`
}

type GiveTagToEmp struct {
	EmpID  int   `json:"empID"`
	TagsID []int `json:"tagsID"`
}

func (GiveTagToEmp) IsEventResult() {}

type ListenCollection struct {
	SessionKey string          `json:"sessionKey"`
	Success    string          `json:"success"`
	Collection []*ListenedChat `json:"collection"`
}

func (ListenCollection) IsEditListenEventCollectionResult() {}

type ListenedChat struct {
	ID     int         `json:"id"`
	Events []EventType `json:"events"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Me struct {
	Employee *Employee     `json:"employee"`
	Personal *PersonalData `json:"personal"`
	Rooms    *Rooms        `json:"rooms"`
}

func (Me) IsMeResult() {}

type Member struct {
	Employee *Employee `json:"employee"`
	Room     *Room     `json:"room"`
}

type Members struct {
	Members []*Member `json:"members"`
}

type Message struct {
	Room        *Room     `json:"room"`
	MsgID       int       `json:"msgID"`
	Employee    *Employee `json:"employee"`
	TargetMsgID *int      `json:"targetMsgID"`
	Body        string    `json:"body"`
	CreatedAt   int64     `json:"createdAt"`
}

type Messages struct {
	Messages []*Message `json:"messages"`
}

func (Messages) IsMessagesResult() {}

type NewMember struct {
	EmpID   int   `json:"empID"`
	RoomsID []int `json:"roomsID"`
}

func (NewMember) IsEventResult() {}

type NewMessage struct {
	MsgID       int    `json:"msgID"`
	RoomID      int    `json:"roomID"`
	TargetMsgID *int   `json:"targetMsgID"`
	EmpID       *int   `json:"empID"`
	Body        string `json:"body"`
	CreatedAt   int64  `json:"createdAt"`
}

func (NewMessage) IsEventResult() {}

type Params struct {
	Limit  *int `json:"limit"`
	Offset *int `json:"offset"`
}

type PersonalData struct {
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Token       string `json:"token"`
}

type RegisterInput struct {
	Domain   string `json:"domain"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RemoveMember struct {
	EmpID  int `json:"empID"`
	RoomID int `json:"roomID"`
}

func (RemoveMember) IsEventResult() {}

type RemoveTagFromEmp struct {
	EmpID int `json:"empID"`
	TagID int `json:"tagID"`
}

func (RemoveTagFromEmp) IsEventResult() {}

type Room struct {
	RoomID          int      `json:"roomID"`
	Name            string   `json:"name"`
	View            RoomType `json:"view"`
	LastMessageRead int      `json:"lastMessageRead"`
	Members         *Members `json:"members"`
}

type Rooms struct {
	Rooms []*Room `json:"rooms"`
}

func (Rooms) IsRoomsResult() {}

type SubscriptionBody struct {
	Event EventType   `json:"event"`
	Body  EventResult `json:"body"`
}

type Successful struct {
	Success string `json:"success"`
}

func (Successful) IsMutationResult() {}
func (Successful) IsRegisterResult() {}
func (Successful) IsSendMsgResult()  {}

type Tag struct {
	TagID int    `json:"tagID"`
	Name  string `json:"name"`
}

type Tags struct {
	Tags []*Tag `json:"tags"`
}

func (Tags) IsTagsResult() {}

type TakeTagFromEmp struct {
	EmpID  int   `json:"empID"`
	TagsID []int `json:"tagsID"`
}

func (TakeTagFromEmp) IsEventResult() {}

type TokenExpired struct {
	Message string `json:"message"`
}

func (TokenExpired) IsEventResult() {}

type TokenPair struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

func (TokenPair) IsLoginResult()         {}
func (TokenPair) IsRefreshTokensResult() {}

type UpdateEmpFirstName struct {
	EmpID int    `json:"empID"`
	Val   string `json:"val"`
}

func (UpdateEmpFirstName) IsEventResult() {}

type UpdateEmpLastName struct {
	EmpID int    `json:"empID"`
	Val   string `json:"val"`
}

func (UpdateEmpLastName) IsEventResult() {}

type UpdateRoomName struct {
	RoomID int    `json:"roomID"`
	Name   string `json:"name"`
}

func (UpdateRoomName) IsEventResult() {}

type UpdateTag struct {
	TagID int    `json:"tagID"`
	Name  string `json:"name"`
}

func (UpdateTag) IsEventResult() {}

type ActionType string

const (
	ActionTypeRead  ActionType = "READ"
	ActionTypeWrite ActionType = "WRITE"
)

var AllActionType = []ActionType{
	ActionTypeRead,
	ActionTypeWrite,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeRead, ActionTypeWrite:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventSubjectAction string

const (
	EventSubjectActionAdd    EventSubjectAction = "ADD"
	EventSubjectActionDelete EventSubjectAction = "DELETE"
)

var AllEventSubjectAction = []EventSubjectAction{
	EventSubjectActionAdd,
	EventSubjectActionDelete,
}

func (e EventSubjectAction) IsValid() bool {
	switch e {
	case EventSubjectActionAdd, EventSubjectActionDelete:
		return true
	}
	return false
}

func (e EventSubjectAction) String() string {
	return string(e)
}

func (e *EventSubjectAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSubjectAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSubjectAction", str)
	}
	return nil
}

func (e EventSubjectAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeAll                EventType = "all"
	EventTypeNewMessage         EventType = "NewMessage"
	EventTypeUpdateEmpFirstName EventType = "UpdateEmpFirstName"
	EventTypeUpdateEmpLastName  EventType = "UpdateEmpLastName"
	EventTypeGiveTagToEmp       EventType = "GiveTagToEmp"
	EventTypeTakeTagFromEmp     EventType = "TakeTagFromEmp"
	EventTypeRemoveTagFromEmp   EventType = "RemoveTagFromEmp"
	EventTypeNewMember          EventType = "NewMember"
	EventTypeRemoveMember       EventType = "RemoveMember"
	EventTypeCreateTag          EventType = "CreateTag"
	EventTypeUpdateTag          EventType = "UpdateTag"
	EventTypeDeleteTag          EventType = "DeleteTag"
	EventTypeUpdateRoomName     EventType = "UpdateRoomName"
	EventTypeDeleteRoom         EventType = "DeleteRoom"
	EventTypeTokenExpired       EventType = "TokenExpired"
)

var AllEventType = []EventType{
	EventTypeAll,
	EventTypeNewMessage,
	EventTypeUpdateEmpFirstName,
	EventTypeUpdateEmpLastName,
	EventTypeGiveTagToEmp,
	EventTypeTakeTagFromEmp,
	EventTypeRemoveTagFromEmp,
	EventTypeNewMember,
	EventTypeRemoveMember,
	EventTypeCreateTag,
	EventTypeUpdateTag,
	EventTypeDeleteTag,
	EventTypeUpdateRoomName,
	EventTypeDeleteRoom,
	EventTypeTokenExpired,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeAll, EventTypeNewMessage, EventTypeUpdateEmpFirstName, EventTypeUpdateEmpLastName, EventTypeGiveTagToEmp, EventTypeTakeTagFromEmp, EventTypeRemoveTagFromEmp, EventTypeNewMember, EventTypeRemoveMember, EventTypeCreateTag, EventTypeUpdateTag, EventTypeDeleteTag, EventTypeUpdateRoomName, EventTypeDeleteRoom, EventTypeTokenExpired:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FetchType string

const (
	FetchTypePositive FetchType = "POSITIVE"
	FetchTypeNeutral  FetchType = "NEUTRAL"
	FetchTypeNegative FetchType = "NEGATIVE"
)

var AllFetchType = []FetchType{
	FetchTypePositive,
	FetchTypeNeutral,
	FetchTypeNegative,
}

func (e FetchType) IsValid() bool {
	switch e {
	case FetchTypePositive, FetchTypeNeutral, FetchTypeNegative:
		return true
	}
	return false
}

func (e FetchType) String() string {
	return string(e)
}

func (e *FetchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FetchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FetchType", str)
	}
	return nil
}

func (e FetchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoomType string

const (
	RoomTypeTalk RoomType = "TALK"
	RoomTypeBlog RoomType = "BLOG"
)

var AllRoomType = []RoomType{
	RoomTypeTalk,
	RoomTypeBlog,
}

func (e RoomType) IsValid() bool {
	switch e {
	case RoomTypeTalk, RoomTypeBlog:
		return true
	}
	return false
}

func (e RoomType) String() string {
	return string(e)
}

func (e *RoomType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoomType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoomType", str)
	}
	return nil
}

func (e RoomType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
