enum FetchType {
    POSITIVE
    NEUTRAL
    NEGATIVE
}
enum ActionType {
    READ
    WRITE
}
enum EventSubjectAction {
    ADD
    DELETE
}
enum RoomType {
    TALK
    BLOG
}

input Params {
    limit: Int
    offset: Int
}

type TokenPair {
    accessToken: String!
    refreshToken: String!
}

type Employee {
    empID: ID!
    firstName: String!
    lastName: String!

    email: String!
    phoneNumber: String!

    # for the client
    tags: Tags! @goField(forceResolver: true)
}
type Employees {
    employees: [Employee!]!
}

type PersonalData {
    email: String!
    phoneNumber: String!
#    roomsOrder: [ID]!
}
enum MsgCreated {
    AFTER
    BEFORE
}
type Room {
    pos: Int!
    roomID: ID!
    name: String!
    view: RoomType!
    # for the client
#    prevRoomID: ID
    lastMessageRead: ID
    lastMessageID: ID
    notify: Boolean!
    members: Members! @goField(forceResolver: true)
}
type Rooms {
    rooms: [Room!]!
}

type Member {
    employee: Employee! @goField(forceResolver: true)
    room: Room! @goField(forceResolver: true)
}
type Members {
    members: [Member!]!
}

type Tag {
    tagID: ID!
    name: String!
}
type Tags {
    tags: [Tag!]!
}

type Message {
    room: Room! @goField(forceResolver: true)
    msgID: ID!
    next: ID
    prev: ID
    employee: Employee @goField(forceResolver: true)
    targetMsg: Message @goField(forceResolver: true)
    body: String!
    createdAt: Int64!
}
type Messages {
    messages: [Message!]!
}

type Me {
    employee: Employee!
#    personal: PersonalData!
    rooms(params: Params!): Rooms! @goField(forceResolver: true)
}

type ListenCollection {
    sessionKey: String!
    success: String!
    collection: [ListenedChat!]! @goField(forceResolver: true)
}

type ListenedChat {
    id: ID!
    events: [EventType!]!
}